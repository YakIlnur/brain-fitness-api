[
  {
    "question": "Which of the following will return a User object when used with a model which deals with a table named User?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)User.new"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)User.destroy"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)User.find"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)User.save"
      }
    ]
  },
  {
    "question": "In the case of Rails application performance optimization, select all valid ways to do assets compilation:",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Running the rake task with the assets:precompile parameter when CSS and JavaScript files are updated."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Set a true value for the config.assets.compile parameter in the config/environments/production.rb file."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Implementing the Rails asset pipeline feature to minify JavaScript & CSS assets."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)All of these."
      }
    ]
  },
  {
    "question": "What is the best way to get the current request URL in Rails?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)request.url"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)request.request_uri"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)request.fullpath"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)request.current_path"
      }
    ]
  },
  {
    "question": "How can a value be stored so that it's shared across an entire request (i.e. make it accessible in controllers, views and models)?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Put it in a global variable."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Create a Singleton and store it in a class variable."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Store it in a thread locally."
      }
    ]
  },
  {
    "question": "Which of the following commands adds the data model info to the model file?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)bundle install"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)generate model"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)annotate"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rails server"
      }
    ]
  },
  {
    "question": "Which of the following HTML template languages are supported by Ruby?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Embedded Ruby"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)HAML"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Mustache"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Razor"
      }
    ]
  },
  {
    "question": "In a has_many association, what is the difference between build and new?\n// user.rb\nhas_many :posts\n// post.rb\nbelongs_to :user",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'new' sets the foreign key while 'build' does not."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'build' sets the foreign key while 'new' does not."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)'build' sets the foreign key and adds it to the collection."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'new' sets the foreign key and adds it to the collection."
      }
    ]
  },
  {
    "question": "What is the output of the following code?\n\n&quot;test&quot;*5",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)type casting error"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)test5"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)5"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)testtesttesttesttest"
      }
    ]
  },
  {
    "question": "When using full-page caching, what happens when an incoming request matches a page in the cache?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)The web-server serves the file directly from disk, bypassing Rails."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rails checks to see if there is a cached page on disk and passes it onto the server."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rails checks its in-memory cache and passes the page onto the server."
      }
    ]
  },
  {
    "question": "What is the difference between _url and _path while being used in routes?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)_url is absolute while _path is relative."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)_path is relative while _path is absolute."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)_path is used in controllers while _url is used in views."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)_path is used in views while _url is used in controllers."
      }
    ]
  },
  {
    "question": "Which of the following code samples will get the index of |page| inside of a loop?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)<% @images.each.do |page,index| %>\n      <% end %>\n    "
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)<% @images.each_with_index do |page, index| %>\n      <% end %>"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)<% @images.collect.each.at_index do |page, index| %>\n      <% end %>\n    "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these"
      }
    ]
  },
  {
    "question": "Which of the following choices will write routes for the API versioning scenario described below?\n\n/api/users returns a 301 to /api/v2/users\n/api/v1/users returns a 200 of users index at version 1\n/api/v3/users returns a 301 to /api/v2/users\n/api/asdf/users returns a 301 to /api/v2/users",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)namespace :api do\n      namespace :v1 do\n      resources :users\n      end\n      namespace :v2 do\n      resources :users\n      end\n      match 'v:api/*path', :to => redirect(\"/api/v2/%{path}\")\n      match '*path', :to => redirect(\"/api/v2/%{path}\")\n      end\n    "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)namespace :api do\n      resources :users\n      end\n      namespace :v2 do\n      resources :users\n      end\n      match 'v:api/*path', :to => redirect(\"/api/v1/%{path}\")\n      match '*path', :to => redirect(\"/api/v1/%{path}\")\n      end\n    "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)namespace :api do\n      scope :module => :v3, &current_api_routes\n      namespace :v3, &current_api_routes\n      namespace :v2, &current_api_routes\n      namespace :v1, &current_api_routes\n      match \":api/*path\", :to => redirect(\"/api/v3/%{path}\")\n      end\n    "
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)None of these"
      }
    ]
  },
  {
    "question": "What is the output of the following Ruby code?\n\nputs \"The multiplication output of 10,10,2 is #{10*10*2}\"",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)200."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The multiplication output of 10,10,2 is #{10*10*2}."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)The multiplication output of 10,10,2 is 200."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The code will give a syntax error."
      }
    ]
  },
  {
    "question": "What is difference between \"has_one\" and \"belong_to\"?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"has_one\" should be used in a model whose table have foreign keys while \"belong_to\" is used with an associated table."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"belong_to\" should be used in a model whose table have foreign keys while \"has_one\" is used with an associated table."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The two are interchangeable."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these."
      }
    ]
  },
  {
    "question": "Which of the following is the correct way to know the Rails root directory path?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)RAILS_ROOT"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Rails.root"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rails.root.show"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rails.show.root"
      }
    ]
  },
  {
    "question": "What is best way to create primary key as a string field instead of integer in rails.",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)when creating a new table don't add primary key using this\n      create_table users, :id => false do |t|\n      t.string :id, :null => false\n      ......\n      end\n      execute(\"ALTER TABLE users ADD PRIMARY KEY (id)\")\n      if not using id as primary key then in users model add the following line\n      class User < ActiveRecord::Base\n      self.primary_key = \"column_name\"\n      ....\n      end"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)you can add a key to column name to make it primary\n      create_table users :id => false do |t|\n      t.string :column_name, :primary => true\n      end\n    "
      }
    ]
  },
  {
    "question": "In a Rails application, a Gemfile needs to be modified to make use of sqlite3-ruby gems. Which of the following options will use these gems, as per the new Gemfile?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)install bundle Gemfile"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)bundle install"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)mate Gemfile"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)gem bundle install"
      }
    ]
  },
  {
    "question": "What is the recommended Rails way to iterate over records for display in a view?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Implicitly loop over a set of records, and send the partial being rendered a :collection."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Use each to explicitly loop over a set of records."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Use for to fetch individual records explicitly in a loop."
      }
    ]
  },
  {
    "question": "where we use attr_accessor and attr_accessible in rails ?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)controller"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)helper"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)model"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)view"
      }
    ]
  },
  {
    "question": "Given the following code, where is the \"party!\" method available?\n\nmodule PartyAnimal\n    def self.party!\n        puts \"Hard! Better! Faster! Stronger!\"\n    end\nend\n\nclass Person\n    include PartyAnimal\nend",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)PartyAnimal.party!"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Person.party!"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Person.new.party!"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Both PartyAnimal.party! and Person.party!"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these"
      }
    ]
  },
  {
    "question": "Which part of the MVC stack does ERB or HAML typically participate in?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Class"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Controller"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Model"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Module"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)View"
      }
    ]
  },
  {
    "question": "Which of the following items are stored in the models subdirectory?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)helper classes"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)database classes"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)HTML layout templates"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Config files"
      }
    ]
  },
  {
    "question": "What is the output of the following code in Ruby?\nx= \"A\" + \"B\"\nputs x\ny= \"C\" << \"D\"\nputs y",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)AB\n      CD"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)AB\n      C\n    "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)AB\n      D\n    "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)AB\n      DC\n    "
      }
    ]
  },
  {
    "question": "Which gem is used to install a debugger in Rails 3?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)gem 'ruby-debug1'"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)gem \"ruby-debug19\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)gem \"debugger19\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)gem \"ruby-debugger\""
      }
    ]
  },
  {
    "question": "What exception cannot be handled with the rescue_from method in the application controller?\ne.g\nclass ApplicationControllers < ActionController::Base\n  rescue_from Exception, with: error_handler\n  ..........\nend",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Server errors "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Record not found (404)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Routing errors"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)All of these"
      }
    ]
  },
  {
    "question": "What component of Rails are tested with unit tests?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Models"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Controllers"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)View helpers"
      }
    ]
  },
  {
    "question": "Which of the following replaced the Prototype JavaScript library in Ruby on Rails as the default JavaScript library?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)jQuery"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Ajax"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Script.aculo.us"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)ajax-li"
      }
    ]
  },
  {
    "question": "If a method #decoupage(n) is described as O(n^2), what does that mean?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The fewest number of operations it will perform is n*n."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)The worst case run time is proportional to the size of the square of the method's input."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The method operates by squaring the input."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The return value for the method will be the length of the input squared."
      }
    ]
  },
  {
    "question": "What is green-threading?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A design pattern where a fixed-size pool of threads is shared around a program."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)When threads are emulated by a virtual machine or interpreter."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Where programs are run across multiple CPUs."
      }
    ]
  },
  {
    "question": "Which of the following assertions are used in testing views?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)assert_valid"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)assert_select_email"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)assert_select_encoded"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)css_select"
      }
    ]
  },
  {
    "question": "Is an AJAX call synchronous or asynchronous?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Asynchronous"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Synchronous"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Either; it is configurable"
      }
    ]
  },
  {
    "question": "Which of the following commands will clear out sample users from the development database?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)rake db:migrate"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)rake db:reset"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)rake db:rollback"
      }
    ]
  },
  {
    "question": "Given below are two statements regarding the Ruby programming language:\n\nStatement X: \"redo\" restarts an iteration of the most internal loop, without checking loop condition.\nStatement Y: \"retry\" restarts the invocation of an iterator call. Also, arguments to the iterator are re-evaluated.\n\nWhich of the following options is correct?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Statement X is correct, but statement Y is incorrect."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Statement X is incorrect, but statement Y is correct."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Both statements are correct."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Both statements are incorrect."
      }
    ]
  },
  {
    "question": "Choose the best way to implement sessions in Rails 3:\n\nA) Using CookieStore\nB) By creating a session table and setting config/initializers/session_store.rb with Rails.application.config.session_store :active_record_store\nC) By setting config/initializers/session_store.rb with Rails.application.config.session_store :active_record_store only",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)B"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)C"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)B and C"
      }
    ]
  },
  {
    "question": "Which of the following is the correct way to skip ActiveRecords in Rails 3?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)ActiveRecords cannot be skipped."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Use option -O while generating application template."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Use option -SKIP_AR while generating the application template."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Add new line SKIP: ACTIVERECORD in config.generators."
      }
    ]
  },
  {
    "question": "Which of the following is the default way that Rails seeds data for tests?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Data Migrations"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Factories"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Fixture Factories"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Fixtures"
      }
    ]
  },
  {
    "question": "Which of the following options, when passed as arguments, skips a particular validation?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency):validate => skip"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency):validate => off"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency):validate => disable"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency):validate => false"
      }
    ]
  },
  {
    "question": "What declaration would you use to set the layout for a controller?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)layout 'new_layout'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)set_layout 'new_layout'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)@layout = 'new_layout'"
      }
    ]
  },
  {
    "question": "What is the output of the following code?\n\nputs \"aeiou\".sub(/[aeiou]/, '*')",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)*"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)*****"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)*eiou"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)nil"
      }
    ]
  },
  {
    "question": "Suppose a model is created as follows:\n    rails generate model Sales\n    rake db:migrate\n\nWhat would be the best way to completely undo these changes, assuming nothing else has changed in the meantime?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)rails reset models; rake db:rollback"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)rails destroy model Sales; rake db:rollback"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)rake db:rollback; rails rollback model Sales"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)rake db:rollback; rails destroy model Sales"
      }
    ]
  },
  {
    "question": "What is the difference between :dependent => :destroy and :dependent => :delete_all in Rails?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)There is no difference between the two; :dependent => :destroy and :dependent => :delete_all are semantically equivalent."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)In :destroy, associated objects are destroyed alongside the object by calling their :destroy method, while in :delete_all, they are destroyed immediately, without calling their :destroy method."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)In :delete_all, associated objects are destroyed alongside the object by calling their :destroy method, while in :destroy, they are destroyed immediately, without calling their individual :destroy methods."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these."
      }
    ]
  },
  {
    "question": "Which of the following methods is used to check whether an object is valid or invalid?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency).valid? and .invalid?"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)valid() and invalid()"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)isvalid and isinvalid"
      }
    ]
  },
  {
    "question": "Which of the following is the correct way to rollback a migration?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A migration cannot be rollbacked."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)rake db:rollback STEP=N (N is the migration number to be rollbacked)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)rake db:migrate:reset: (N) (N is the migration number to be rollbacked)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)rake db:rollback migration=N (N is the migration number to be rollbacked)"
      }
    ]
  },
  {
    "question": "Which of the following is the correct syntax for an input field of radio buttons in form_for?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)<%= f.radio_button :contactmethod, 'sms' %>"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)<%= f.radio_button_tag :contactmethod, 'sms' %>"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)<%= radio_button_tag :contactmethod, 'sms' %>"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)<%= f.radio_button \"contactmethod\", 'sms' %>"
      }
    ]
  },
  {
    "question": "Which is the best way to add a page-specific JavaScript code in a Rails 3 app?\n  <%= f.radio_button :rating, 'positive', :onclick => \"$('some_div').show();\" %>",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)<% content_for :head do %>\n      <script type=\"text/javascript\">\n      <%= render :partial => \"my_view_javascript\"\n      </script>\n      <% end %>\n      Then in layout file\n      <head>\n      ...\n      <%= yield :head %>\n      </head>"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)In the application_helper.rb file:\n      def include_javascript (file)\n      s = \" <script type=\\\"text/javascript\\\">\" + render(:file => file) + \"</script>\"\n      content_for(:head, raw(s))\n      end\n      Then in your particular view (app/views/books/index.html.erb in this example)\n      <% include_javascript 'books/index.js' %>\n    "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)In the controller:\n      def get_script\n      render :file => 'app/assessts/javascripts/' + params[:name] + '.js'\n      end\n      def get_page\n      @script = '/' + params[:script_name] + '.js?body=1'\n      render page\n      end\n      In View\n      <script type=\"text/javascript\",:src => @script>\n    "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these"
      }
    ]
  },
  {
    "question": "In order to enable locking on a table, which of the following columns is added?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)lock_version column"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)identity column"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)primary key column"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)lock_optimistic column"
      }
    ]
  },
  {
    "question": "If a float is added to an integer, what is the class of the resulting number? i.e. 1.0 + 2",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Integer"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Float"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)BigDecimal"
      }
    ]
  },
  {
    "question": "In a Rails Migration, which of the following will make a column unique, and then have it indexed?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)add_index :table_name, :column_name, :unique => true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)add_index :unique => true ,:table_name, :column_name"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)add_index :table_name, [:column_name_a,  :unique => true ,:column_name_b], :unique => true "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these"
      }
    ]
  },
  {
    "question": "Which of the following will disable browser page caching in Rails?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)expire_page(:controller => 'products', :action => 'index')"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)expire_fragment(:controller => 'products', :action => 'index')"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)expire_page_fragment('all_available_products')"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)expire_fragment('all_available_products')"
      }
    ]
  },
  {
    "question": "Which of the following commands will test a particular test case, given that the tests are contained in the file test/unit/demo_test.rb, and the particular test case is test_one?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)$ ruby -Itest test/unit/demo_test.rb -n test_one"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)$ ruby -Itest test/unit/demo_test.rb -a test_one"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)$ ruby -Itest test/unit/demo_test.rb test_one"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)$ ruby -Itest test/unit/demo_test.rb -t test_one"
      }
    ]
  },
  {
    "question": "Consider the following code snippet:\n\ndef index\n    render\nend\n\nThe corresponding index.html.erb view is as following:\n\n<html>\n<head>\n\n<title>Ruby on Rails sample application | <%=@title%></title>\n\n</head>\n<body></body>\n</html>\n\nWhich of the following options is correct?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The application will give an exception as @title variable is not defined in the controller."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The HTML page will render with the title: Ruby on Rails sample application | <%=@title%>."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)The HTML page will render with the title: Ruby on Rails sample application |."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The HTML page will render with the title: Ruby on Rails sample application."
      }
    ]
  },
  {
    "question": "Unit tests are used to test which of the following components of Ruby on Rails?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Models"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Controllers"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Views"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Helper classes"
      }
    ]
  },
  {
    "question": "If a controller is named \"Users\", what would its helpers module be called?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)UsersHelper"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)UserControllerHelper"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)UserHelp"
      }
    ]
  },
  {
    "question": "Which of the following serves as a structural skeleton for all HTML pages created?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)application.html.erb"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)default.html.erb"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)index.html.erb"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)layout.html.erb"
      }
    ]
  },
  {
    "question": "Which of the following statements is incorrect?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Rails does not support ODBC connectivity."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rails can rollback database changes in development mode."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rails can work and connect with multiple databases."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rails database information is stored in the database.yml file."
      }
    ]
  },
  {
    "question": "What is the Singleton design pattern?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)A class for which there is only ever one instance."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A single feature application, intended to enhance usability by keeping things simple."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A class which is never instanced, but acts as a container for methods which are used by it's subclasses."
      }
    ]
  },
  {
    "question": "Users who are new to MVC design often ask how to query data from Views. Is this possible? And if so, is this a good idea?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)It is not possible, because ActiveRecord queries cannot be made from Views."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)It is not possible, because Controllers do not provide enough information to the Views."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)It is possible, but it is a bad idea because Views should only be responsible for displaying objects passed to them."
      }
    ]
  },
  {
    "question": "What does REST stand for?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Ruby Enclosed Standard Templating"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Resource Standard Transfer"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)REasonable Standards Testing"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)REpresentational State Transfer"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rights Enabled Safety Tunnel"
      }
    ]
  },
  {
    "question": "With the two models Hive and Bee; when creating a belongs_to association from the Bee model to Hive, what is the foreign key generated on Bee?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)hive_id"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)hives_id"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)ee_id"
      }
    ]
  },
  {
    "question": "Which of the following is not true about log levels in Ruby on Rails?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)The available log levels are: :debug, :info, :warn, :error, and :fatal, corresponding to the log level numbers from 1 up to 5 respectively."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)To check the current log level, the Rails.logger.level method has to be called."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)By default, each log is created under Rails.root/log/ and the log file name is environment_name.log."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The default Rails log level is error in production mode and debug in development and test mode."
      }
    ]
  },
  {
    "question": "When a new controller named \"admin2\" is created, the JS and the CSS files are created in:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)controllers"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)helpers"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)assets"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)views"
      }
    ]
  },
  {
    "question": "Select all incorrect statements regarding the Ruby Version Manager (RVM):",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)RVM is a command-line tool which allows developers to easily install, manage, and work with multiple Ruby environments from interpreters to sets of gems."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)RVM provides a revision control tool to maintain current and historical versions of files such as source code, web pages, and documentation."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Test suites, rake tasks, benchmarks and gem commands can be run against multiple Ruby versions at the same time with RVM."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)RVM cannot automate the installation and maintenance of gems, it has to be done manually."
      }
    ]
  },
  {
    "question": "Which of the following is not a built-in Rails caching strategy used to reduce database calls?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Page Caching"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Fragment Caching"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Object Caching"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Query Caching"
      }
    ]
  },
  {
    "question": "In a Rails application, the developmental and production configuration are stored in the:",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)config/environment folder"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)public folder"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)spec folder"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)task folder"
      }
    ]
  },
  {
    "question": "What is the convention for methods which end with a question mark? e.g. #all?, #kind_of?, directory?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)They should always require arguments."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)They should always return a boolean value."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)They should always report a value of the object they're being called on."
      }
    ]
  },
  {
    "question": "Which of the following correctly handles the currency field?\n\nA) add_column :items, :price, :decimal, :precision => 8, :scale => 2\nB) add_money :items, :price, currency: { present: false }",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)A"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)B"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Both A and B are correct."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Both A and B are incorrect."
      }
    ]
  },
  {
    "question": "How can a partial called \"cart\" be rendered from a controller called \"ProductsController\", assuming the partial is in a directory called \"shared\"?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)render :partial => 'shared/cart'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)partial 'shared/cart'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)render 'cart'"
      }
    ]
  },
  {
    "question": "What does the 4xx series of HTTP errors represent?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)They are intended for cases in which the server seems to have encountered an error."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)They are intended for cases in which the client seems to have encountered an error."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)They indicate that further action needs to be taken by the user agent in order to fulfill the request."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)They indicate that no further action can be taken by the user agent."
      }
    ]
  },
  {
    "question": "Which of the following validations in Rails checks for null fields?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)validates_presence_of"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)validates_length_of"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)validates_confirmation_of"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)validates_uniqueness_of"
      }
    ]
  },
  {
    "question": "Using ERB for views, what filename should be given to a partial called 'login'?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)partial_login.e"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)_login.html.e"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)login.html.e"
      }
    ]
  },
  {
    "question": "What is output of following statements?\n1) \"\".nil? == \"\".empty? && \"\".blank? == \"\".empty?\n2) !\"\".nil? == \"\".empty? && \"\".blank? == \"\".empty?\n3) nil.nil? == nil.empty? && nil.blank? == nil.empty?\n4) !\"\".blank? == \"\".present?\n5) \"\".any? == !\"\".empty?\n6) \"  \".blank? == \"  \".empty?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency) 1) false\n      2) true\n      3) NoMethodError: undefined method `empty?' for nil:NilClass\n      4) true\n      5) NoMethodError: undefined method `any?' for \"\":String\n      6) false "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency) 1) false\n      2) NoMethodError: undefined method `empty?' for \"\":String\n      3) true\n      4) true\n      5) NoMethodError: undefined method `any?' for \"\":String\n      6) false\n    "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency) 1) false\n      2) true\n      3) true\n      4) true\n      5) false\n      6) false\n    "
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency) 1) false\n      2) true\n      3) false\n      4) true\n      5) true\n      6) false\n    "
      }
    ]
  },
  {
    "question": "For the String class, what's the difference between \"#slice\" and \"#slice!\"?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None, \"#slice\" is just an alias for \"#slice!\"."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)There is no \"#slice!\" method in Ruby on Rails."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"#slice\" returns a new object, \"#slice!\" destructively updates â mutates â the object's value."
      }
    ]
  },
  {
    "question": "Which of the following controller actions (by default) are best suited to handle the GET HTTP request?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)index"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)show"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)create"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)edit"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)update"
      }
    ]
  },
  {
    "question": "Rails automatically requires certain files in an application. Which of the following files are automatically included without an explicit 'require' being necessary?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)All files in lib."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)All files in models, views, controllers, and files named rails.rb in lib."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)All files in models, views, controllers, and any init.rb in plugins."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Only files explicitly referenced from an initializer in config/initializers."
      }
    ]
  },
  {
    "question": "Which of the following is true about writing tests for a Ruby on Rails application?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rails semi-automates the process of writing tests. It starts by producing skeleton test code in the background while models and controllers are being written."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Running tests in Rails ensures that the code adheres to the desired functionality even after major code refactoring."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Rails tests can simulate browser requests, and thus test the application's response without having to test it through a browser."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)All of these."
      }
    ]
  },
  {
    "question": "What is the behavior of class variables with subclasses?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Subclasses inherit a default value for the class variable, which can then be modified for just the subclass."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Class variables are shared between between all classes in the hierarchy."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Class variables are not inherited."
      }
    ]
  },
  {
    "question": "There is a table named Product in a Rails application. The program is required to fetch any 5 rows where the productid is 2. Which of the following is the correct option to perform this action?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Product.find(:productid=>2), :offset=>5"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Product.find(:productid=>2), :limit=>5"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Product.find(:productid=>2), :only=>5"
      }
    ]
  },
  {
    "question": "Consider the following information for a User view:\n\nuser_path named route with value \"/users/\"\n\n@user = 1\n\n\nNow, consider the following code in the HTML erb template:\n\n<%= link_to user_path(@user), \"Angel\" %>\n\n\nWhat will be the HTML output of this code?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)a href='/users/1'>Angel</a"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)a href='Angel'>/users/1</a"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)a href='/users/1'>/users/1</a"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)a href='Angel'>Angel</a"
      }
    ]
  },
  {
    "question": "If a model called BlogComment is defined, what would its DB table be called?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)blog_comment"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)blogcomments"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)blog_comments"
      }
    ]
  },
  {
    "question": "What is the output of the following code?\n$val = 20\nprint \"Sample Text\\n\" if $val",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)20"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Sample Text"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)No output"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Syntax error"
      }
    ]
  },
  {
    "question": "Which of the following options will disable the rendering of the view associated with a controller action?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)render :layout=>false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)render :layout=>nil"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)render :layout=>disabled"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)render :layout=>off"
      }
    ]
  },
  {
    "question": "The =~ operator is used to do inline Regular Expression matching, for instance:\n\n\"function\" =~ /fun/\n\"function\" =~ /dinosaurs/\n\nWhat are possible return values for the =~ matcher?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true, false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"fun\", nil"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1 and 0 only"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)0 and nil only"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)nil, 0, and any positive integer"
      }
    ]
  },
  {
    "question": "Which of the following options is used to create a form HTML in the erb files?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)form_for"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)create_form"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)form_do"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)form"
      }
    ]
  },
  {
    "question": "Which of the following actions is fired by default when a new controller is created?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)index"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)run"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)show"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)login"
      }
    ]
  }
]
