[
  {
    "question": "Consider: var x = ['a', 'b', 'c'];  Which line of code will remove the first element of the array, resulting in x being equal to ['b', 'c']?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)x.splice(0);"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)x.splice(0, 1);"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)x.pop();"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)x.unshift(0);"
      }
    ]
  },
  {
    "question": "What is the value of x?  var z = [typeof z, typeof y][0]; var x = typeof typeof z;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"undefined\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"array\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"object\""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"string\""
      }
    ]
  },
  {
    "question": "Which of the following is a JavaScript comment?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\\\\ comment"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)// comment"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)# comment"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)<!-- comment -->"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)-- comment"
      }
    ]
  },
  {
    "question": "var foo  = 'Global'; function fun() {     log( foo );     var foo = 'Local';     log( foo ); } fun();  What the output of the above to log()?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Global Local"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined Local"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Global Global"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Local Local"
      }
    ]
  },
  {
    "question": "console.log( typeof [1,2] )  will print out:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)string"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)array"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)number"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)object"
      }
    ]
  },
  {
    "question": "JavaScript is ...",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)subjective"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)object based"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)objective"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)evil"
      }
    ]
  },
  {
    "question": "Every object is linked to a _________ object from which it can inherit properties.",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)argument"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)prototype"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)sibling"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)parent"
      }
    ]
  },
  {
    "question": "What is the value of x?  var x = typeof NaN;",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"number\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"double\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"object\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"integer\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"nan\""
      }
    ]
  },
  {
    "question": "What will be the value of result?  function foo(bar) {  return bar ? bar == foo : foo(foo); }  var result = foo();",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Function won't work due to incorrect syntax"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Value will be null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Function will end up in infinite loop"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      }
    ]
  },
  {
    "question": "What values will the output function be called with, in the following code:  var foo; var bar = {     name: \"baz\",     email: \"fiz@example.com\",     sendmail: function() { } };  for (foo in bar) {   output(foo); }",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"name\", \"email\", \"sendmail\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"baz\", \"fiz@example.com\", null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"name\", \"email\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"baz\", \"fiz@example.com\", undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Type Error"
      }
    ]
  },
  {
    "question": "var x = {}; var foo = function () {     this.hello = \"Hi\";     return this; }; x.bar = foo;  What is the value of the following code: x.bar().bar().hello;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)TypeError: Object -- has no method 'bar'"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"Hi\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"function () { this.hello = \"Hi\"; return this; }\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)TypeError: Cannot call method 'bar' of undefined"
      }
    ]
  },
  {
    "question": "Which of the following assigned values of x will cause (x == x) to return false?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)0/0"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Number(\"foo\")"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)All of the answers"
      }
    ]
  },
  {
    "question": "What would this code print out?  if (new Boolean(false))     console.log(\"True\"); else     console.log(\"False\");",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)True"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)False"
      }
    ]
  },
  {
    "question": "Which two values are logged by the following code?  var x = 5;  (function () {     console.log(x);     var x = 10;     console.log(x);  }());",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)10 10"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)5 10"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined 10"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)nothing. Throws ReferenceError: x is not defined"
      }
    ]
  },
  {
    "question": "Infinity * null will return :",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Infinity"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      }
    ]
  },
  {
    "question": "Assuming alert displays a string of its argument:  var a = 10; function example(){    alert(a);    var a = 5;     } example();  What will be shown if the preceding code is executed?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)5"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)10"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      }
    ]
  },
  {
    "question": "What is the result?  \"\" ? \"a\" : \"b\"",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"\""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"b\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"a\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Error: \"\" is not a boolean"
      }
    ]
  },
  {
    "question": "What is the value of x?  var x = typeof null;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"null\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"object\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      }
    ]
  },
  {
    "question": "The length property of an Array object is always:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)equal to the number of properties in that object"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)equal to the highest index of that object"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)equal to the highest index of that object + 1"
      }
    ]
  },
  {
    "question": "var data = [1, 2, 3, 4, 5, 6]; data.shift(); What does data look like?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)[2, 3, 4, 5, 6]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[1, 2, 3, 4, 5]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[undefined, 1, 2, 3, 4, 5]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[undefined, 2, 3, 4, 5, 6]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[6, 1, 2, 3, 4, 5]"
      }
    ]
  },
  {
    "question": "Which fact is true about the keyword \"default\"?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)It does not exist in JavaScript"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)It catches any case clauses not caught by case statements within a switch statement"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)It sets up one variable to check against multiple values"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)It branches program logic based on the value of a condition"
      }
    ]
  },
  {
    "question": "Which String prototype method is capable of removing a character from a string?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)destroy()"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)delete()"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)remove()"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)replace()"
      }
    ]
  },
  {
    "question": "What is the value of x after the following statement?  var x = 1 == '1';",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'1'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      }
    ]
  },
  {
    "question": "What is the result of the following code snippet?  var small = 'BIG'; var BIG = 'small'; console.log(/small/.test(BIG)); console.log(/BIG/.test(small));",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false true"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true true"
      }
    ]
  },
  {
    "question": "What is the result of the following statement: typeof \"x\";",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"string\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"[object String]\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"undefined\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"character\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Throws error \"ReferenceError: x is not defined\""
      }
    ]
  },
  {
    "question": "Is there a value type for individual string characters?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Yes, accessing a character offset from a (non-empty) string will yield a value of type \"char\"."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)No, there is only type \"string\" for characters."
      }
    ]
  },
  {
    "question": "Given a variable named stringVar with a string value, what does the following do?  stringVar.toUpperCase();",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Evaluate any string expression in stringVar"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Alters stringVar, changes all letters to uppercase"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Return a copy of stringVar with all letters in uppercase"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Return the number of characters in the stringVar variable"
      }
    ]
  },
  {
    "question": "Which is an example of (only) an object literal in Javascript?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var obj = {     prop1: 'property 1',     prop2: 'property 2' };"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var obj = [ \"property 1\", \"property 2\" ]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var obj = new Object() {      this.prop1 = 'property 1';      this.prop2 = 'property 2'; }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var obj = [ {prop1: 'property 1', prop2: 'property2'} ]"
      }
    ]
  },
  {
    "question": "The loop isn't working. What's the problem? <code> var foos = ['a', 'b', 'c' , 'd', 'e']; var bars = ['x', 'y', 'z']; for (var i = 0; i < foos.length; i++) {   var foo = foos[i];   for (var i = 0; i  < bars.length; i++) {     var bar = bars[i];     /* some code using `bar` */   } } </code>",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)There is no bug. The loop will run correctly."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)The inner loop resets the outer for-loop, leaving it a fixed position each time, causing an infinite loop (hint: no block scope)."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Uncaught SyntaxError."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The outer-loop finishes after the first iteration due to a \"bug\" that unfortunately is part of the ECMAScript specification."
      }
    ]
  },
  {
    "question": "Functions in javascript are always ..",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)objects"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)in the global scope"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)operators"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)loops"
      }
    ]
  },
  {
    "question": "How do you read the first character in a string?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)data.substr(0);"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)data.slice(1)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)data.charAt(1);"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)data.substring(1);"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)data.charAt(0);"
      }
    ]
  },
  {
    "question": "Which of the following have special meanings within the language syntax?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Literals"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Reserved words"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Identifiers"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Variables"
      }
    ]
  },
  {
    "question": "What is the result?  0 == \"\"",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Error: type mismatch"
      }
    ]
  },
  {
    "question": "Primitive types are passed by :",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Value"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Pointer"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Reference"
      }
    ]
  },
  {
    "question": "To what type are values converted internally when evaluating a conditional statement?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)tinyint"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)negative"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)positive"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)boolean"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)integer"
      }
    ]
  },
  {
    "question": "var x = \"foo\"; x = !!x;  What is the value of x?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"!!foo\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      }
    ]
  },
  {
    "question": "What will calling the below test function log to console?  function test(){     console.log(a);     var a = 'hello';     console.log(a); }",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined, \"hello\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)ReferenceError: a is not defined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"\", \"hello\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)ReferenceError: a is not defined, \"hello\""
      }
    ]
  },
  {
    "question": "How do you assign an anonymous function to a variable?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var anon = func({});"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var anon = function() { };"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var anon = new Function () { };"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var anon = func() { };"
      }
    ]
  },
  {
    "question": "What is the value of x?  var x = 2 + \"2\";",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)4"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"4\""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"22\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)22"
      }
    ]
  },
  {
    "question": "Which of these is not a JavaScript statement?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)break"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)None, these are all valid statements."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)throw"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)continue"
      }
    ]
  },
  {
    "question": "Which of the following variable types does not exist in JavaScript?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)double"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)string"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)boolean"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)number"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)object"
      }
    ]
  },
  {
    "question": "Which of the following is a way to add a new value to the end of an array?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)arr.length = value;"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)arr[arr.length] = value;"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)arr[arr.length()] = value;"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)arr[value] = length;"
      }
    ]
  },
  {
    "question": "What is the RegExp object constructor used for?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Match text against regular expressions"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Switches numerical notation to exponential"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Provides access to Windows registry express values"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Regulates the expression of variables"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Registers experienced functions with the DOM"
      }
    ]
  },
  {
    "question": "What does \"2\" + 3 + 4 evaluate to?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)'234'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)9"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'27'"
      }
    ]
  },
  {
    "question": "When an array index goes out of bounds, what is returned?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A default value, like 0"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)the first or last value in the array"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)An error to the browser"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Moderate"
      }
    ]
  },
  {
    "question": "Which is the correct syntax to write array literals in JavaScript?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var x = [\"blank\",\"blank\",\"blank\"];"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var x = {\"blank\",\"blank\",\"blank\"};"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var x = new Array(1:\"blank\",2:\"blank\",3:\"blank\")"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var x = array(\"blank\", \"blank\", \"blankâ);"
      }
    ]
  },
  {
    "question": "The \"exploit\" property:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Is obsolete"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Represents a variable"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Does not exist in JavaScript"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Is a very important property"
      }
    ]
  },
  {
    "question": "split() is a method of which constructors' prototype?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Array.prototype"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)String.prototype"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Number.prototype"
      }
    ]
  },
  {
    "question": "Which of the following orders can be performed with the Array prototype \"sort()\" callback?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Descending alphabetical"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)ASCII ordering"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Ascending alphabetical"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)All of these"
      }
    ]
  },
  {
    "question": "var a = {1:'one',2:'two',3:'three'};  var b = Object.keys(a); What's the value of b?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)An array with all of the distinct keys from the obj a"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)An obj with autowired getters and setters for it's key/values"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)none of the above"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A serialized copy of the obj a"
      }
    ]
  },
  {
    "question": "How do you write a conditional statement that will *only* execute the contained  code if variable x has a value 5 of type *number*?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)if x = 5 then ..."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)if (x == 5) { ... }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)if x = 5 ..."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)if (x === 5) { ... }"
      }
    ]
  },
  {
    "question": "What is the value of c?  var a = function(){     this.b = 1; } var b = function(){     var b = new a().b;     return 5 + b; } var c = b();",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)5"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Error thrown when running the code"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)6"
      }
    ]
  },
  {
    "question": "How do you find the number with the highest value of x and y?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)ceil(x, y)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Math.ceil(x, y)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)top(x, y)"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Math.max(x, y)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)max(x, y)"
      }
    ]
  },
  {
    "question": "What is the value of x?  var a = false; var x = a  ? âAâ : âBâ;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"A\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"B\""
      }
    ]
  },
  {
    "question": "Which of the following operators can assign a value to a variable?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)="
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)All of these"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)+="
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)%="
      }
    ]
  },
  {
    "question": "What is the value of x?  var x = '1'+2+3;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)6"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The statement generates an error."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"123\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)15"
      }
    ]
  },
  {
    "question": "Which of the following is the equivalent of the following.  if (a) {     x = b; } else {     x = c; }",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)x = a : b ? c;"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)x = a ? b : c;"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)x = a ? b , c;"
      }
    ]
  },
  {
    "question": "What is the value of x?  var obj = {}; obj[\"function\"] = 123; x = obj.function;",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)123"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined. SyntaxError due to illegal position of a reserved word"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)native Function constructor"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined. Silent failure."
      }
    ]
  },
  {
    "question": "null === undefined",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      }
    ]
  },
  {
    "question": "Which event fires whenever a control loses focus?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)onmove"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)onchange"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)onblur"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)onclick"
      }
    ]
  },
  {
    "question": "Which of these is not a logical operator?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)||"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)&"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)!"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)&&"
      }
    ]
  },
  {
    "question": "Which of these operators compares two variables by value AND type?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)=="
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)="
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)==="
      }
    ]
  },
  {
    "question": "Which message does the following log to the console?  bar();  function bar() {    console.log('bar'); }",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)SyntaxErrror"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"bar\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)TypeError"
      }
    ]
  },
  {
    "question": "Which of the following invokes a user-defined object constructor function?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var x = create myConstructor();"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var x = new myConstructor();"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)myConstructor x = create myConstructor();"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)myConstructor x = new myConstructor();"
      }
    ]
  },
  {
    "question": "The function call Math.ceil(3.5) returns:",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)4"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)3"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)0"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Throws a MathError exception."
      }
    ]
  },
  {
    "question": "In JavaScript, to call a function directly, you use:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function_expression -> ( arguments_if_any )"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)function_expression ( arguments_if_any )"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function_expression { arguments_if_any }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)arguments_if_any ( function_expression )"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)( arguments_if_any ) -> function_expression"
      }
    ]
  },
  {
    "question": "How do you declare a function?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function:doSomething() {}"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)all of these"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function=doSomething() {}"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)function doSomething() {}"
      }
    ]
  },
  {
    "question": "How would one declare a string variable?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var fName = \"Mary\";"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var names = \"7\";"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Any of these"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var fName = new String;"
      }
    ]
  },
  {
    "question": "What is the value of a : var a = 3; var b = 2; var c = a; var a=b=c=1;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)3"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)2"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)1"
      }
    ]
  },
  {
    "question": "Properties of objects may be accessed using...",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)the redirect notation in JavaScript."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)none of these"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)the dot notation in JavaScript."
      }
    ]
  },
  {
    "question": "What is the value of the array myArr after execution of the following code:  var myArr = [1,2,3,4,5]; myArr.shift();",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)[2,3,4,5]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[1,2,3,4,5]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[1,2,3,4]"
      }
    ]
  },
  {
    "question": "What does isNaN() do?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Converts a non-numeric value to a number."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Throws an error if a conditional statement is false."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Only returns true if the argument is not a number"
      }
    ]
  },
  {
    "question": "What keyword is used to define the alternative path to take in a conditional statement?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)altenative"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)next"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)or"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)else"
      }
    ]
  },
  {
    "question": "What is the difference between a while loop and a do...while loop?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The code inside a while loop will always be executed at least once, even if the condition is false."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)The code inside a do...while loop will always be executed at least once, even if the condition is false."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)There is no difference between them."
      }
    ]
  },
  {
    "question": "What is the difference between == and === ?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The == is used in comparison, and === is used in value assignment."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)The == operator converts both operands to the same type, whereas === returns false for different types."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The === is deprecated, and now they are exactly the same."
      }
    ]
  },
  {
    "question": "Which of these could be a correct way to create an instance of Person?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var Person john = new Person('John', 'Doe', 50, 'blue');"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)new john = Person('John', 'Doe', 50, 'blue');"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Person john = new Person('John', 'Doe', 50, 'blue');"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var john = new Person('John', 'Doe', 50, 'blue');"
      }
    ]
  },
  {
    "question": "(function( ) {     var x = foo( );     function foo( ){         return \"foobar\"     };     return x; })( );  What does this function return?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)TypeError: undefined is not a function"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"foobar\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)ReferenceError: foo is not defined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)foo( )"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      }
    ]
  },
  {
    "question": "What operator is used for string concatenation?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)&"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)All of these"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)+"
      }
    ]
  },
  {
    "question": "Which is the correct way to write a JavaScript array?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var names = [\"Tim\",\"Kim\",\"Jim\"];"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var names = {1: \"Tim\", 2:\"Kim\", 3:\"Jim\"};"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var names = {0: \"Tim\", 1: \"Kim\", 2: \"Jim\"};"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var names = array(\"Tim\", \"Kim\", \"Jim\");"
      }
    ]
  },
  {
    "question": "USERNAME and userName",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Represent the name of the same constant"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Represent the name of the same variable"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Represent the name of different constants"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Represent the name of different variables"
      }
    ]
  },
  {
    "question": "Which of these descriptors applies to JavaScript?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Loosely typed, values of any type can be assigned to any variable."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Strongly typed, variables are declared with a type, and you can not assign another type to the variable."
      }
    ]
  },
  {
    "question": "Which of the following is an Error object constructor?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)EvalError"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)All of these"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Error"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)RangeError"
      }
    ]
  },
  {
    "question": "How do you check what the type of a value in variable x is?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)typeof(x);"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)x.__type;"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)gettype(x);"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Object.type(x);"
      }
    ]
  },
  {
    "question": "Which of the following is a JavaScript comment?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\\\\ comment"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)<!-- comment -->"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)// comment"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)# comment"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)-- comment"
      }
    ]
  },
  {
    "question": "What is the value of the following expression:  8 % 3",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)5"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)24"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Other/Error"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)2"
      }
    ]
  },
  {
    "question": "var a = '011'; parseInt(a); will return:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)9"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)0"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)error"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)11"
      }
    ]
  },
  {
    "question": "var a = '011'; parseInt(a); will return:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)9"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)0"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)error"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)11"
      }
    ]
  },
  {
    "question": "How does a \"while\" loop start?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)while (i<=10;i++)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)while i=(1 <> 10)"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)while (i<=10)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)while i=1 to 10"
      }
    ]
  },
  {
    "question": "The   `else`   statement  is ___",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)used inside of an `if` statement. To specify the code that should execute if the `if` condition is no longer true."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Does not exist, in JavaScript `or` and `then` are used to specify code to execute for the \"false\" case of the `if` statement."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)used together with the `if` statement to specify the code that should execute when the `if` condition is false."
      }
    ]
  },
  {
    "question": "Given the following code, what does myFunc() return?  var foo = 'foo'; var bar = 'bar'; function myFunc() {     return foo + bar;     }",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"foo + bar\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)An error is thrown because of illegal out of scope access."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"foobar\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"undefinedundefined\""
      }
    ]
  },
  {
    "question": "String literals are written using:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Just double quotes: \"example\""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Either double quotes or single quotes: \"example\" and 'example'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Just single quotes: 'example'"
      }
    ]
  },
  {
    "question": "How is an object property referenced?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)myObj.foo"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)myObj[foo]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)myObj<foo>"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)myObj->foo"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)myObj(foo)"
      }
    ]
  },
  {
    "question": "Which symbol is not used in logical operations?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)&&"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)!"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)||"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)%"
      }
    ]
  },
  {
    "question": "Which of these will throw a SyntaxError?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)if (x === 1) {  }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)if (x == 1) {  }"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)if (x ==== 1) {  }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)if (x = 1) {  }"
      }
    ]
  },
  {
    "question": "JavaScript supports dynamic typing, you can assign different types of values to the same variable.",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      }
    ]
  },
  {
    "question": "How do you round the number 7.25, to the nearest whole number?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Math.round(7.25)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Math.rnd(7.25)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)rnd(7.25)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)round(7.25)"
      }
    ]
  },
  {
    "question": "How to return the first value of this array?  var myArr = [1, 2, 3, 4, 5];  var myVal = ...",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)myArr.unshift();"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)myArr.shift();"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)myArr[1];"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)myArr.pop();"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)myArr[0];"
      }
    ]
  },
  {
    "question": "How do you define a function called \"fName\"?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)function fName() { }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)new fName = { }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)func fName = function () {}"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function fName: { }"
      }
    ]
  },
  {
    "question": "Which of the following is not a reserved word?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)program"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)throw"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)return"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)void"
      }
    ]
  },
  {
    "question": "Which of the following asserts that the variables `A`, `B`, and `C` have unequal values?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A !== B & B !== C"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A !== B || B !== C"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)A !== B && B !== C && A !== C"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A !== B"
      }
    ]
  },
  {
    "question": "What does the \"break\" statement do?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Aborts the current loop or switch statement."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Simulates a JavaScript crash."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Aborts the current function."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Cancels the current event."
      }
    ]
  },
  {
    "question": "Which of the following is a valid function definition?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)func myFunc = (arg1 as string, arg2 as int) { }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function myFunc(arg1, arg2):"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)function myFunc(arg1,arg2) { }"
      }
    ]
  },
  {
    "question": "Which of the following declares a variable with a value of string type?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var myVar = \"This is a string\";"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var string myVar = \"This is a string\";"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)string myVar = \"This is a string\";"
      }
    ]
  },
  {
    "question": "Are variable identifiers case-sensitive?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Yes"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)No"
      }
    ]
  },
  {
    "question": "What is the correct JavaScript syntax to insert a comment that can span multiple lines?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)// This comment has more than one line //"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)// This comment has mor  than one line *//"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)/ This comment has more than one line /"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)/* This comment has more  than one line */"
      }
    ]
  },
  {
    "question": "The \"if\" statement is used to:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Convert an integer value to a boolean"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Deal with logic that should execute only when a condition is true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Deal with logic that should execute only when a condition is false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Create a loop that runs as long as a condition is true"
      }
    ]
  },
  {
    "question": "Which keyboard character represents the assignment operator?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)!"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)?"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)="
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)#"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency):"
      }
    ]
  },
  {
    "question": "String concatenation...",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)is the splitting of a String into two or more Strings"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Is a complex String"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Is an elemental String"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Is the combination of two or more text Strings"
      }
    ]
  },
  {
    "question": "Properties of a RegExp object include:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)ignoreCase"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)source"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)All of these"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)lastIndex"
      }
    ]
  },
  {
    "question": "You use the Math.pow() method to:",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Return a number raised to the power of a second number"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Return any number"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Return a variable value"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Return a random value between 0 and 1"
      }
    ]
  },
  {
    "question": "What is the value of (\"dog\".length)?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)2"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)3"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)4"
      }
    ]
  },
  {
    "question": "Which is NOT a way to create a loop in javascript?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)for (...) { }"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)repeat (...) { }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)while (...) { }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)do { } while(...)"
      }
    ]
  },
  {
    "question": "What is the value of x?  var a = \"A\"; var x = a.concat(\"B\");",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"B\""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"AB\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"A\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[\"A\", \" B\"];"
      }
    ]
  },
  {
    "question": "Which statement loops through an array?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)for (i = 0; i <= myArray.length;)"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)for (var i=0; i < myArray.length; i++)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)for (i < myArray.length; i++)"
      }
    ]
  },
  {
    "question": "The var statement is used to:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Declare a member of a class"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Retrieve a variable descriptor"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Change a constant"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Create a new local variable"
      }
    ]
  },
  {
    "question": "function foo(){     var tmp = 'one_two_three_four_five';     return tmp.replace(/_/g, '+'); }  What does foo() return?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)one+"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)one+two_three_four_five"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)one_two_three_four_five"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)one+two+three+four+five"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)_______________________"
      }
    ]
  },
  {
    "question": "A for loop is written as such: \"for (first property; second property; third property) {...}\"   What does the third property represent?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A condition to check at the beginning of a loop cycle"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)An action to take at the end of the current loop cycle"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)An action to take at the beginning of the loop cycle"
      }
    ]
  },
  {
    "question": "Where do you use the \"break\" statement?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)To add a value to an array."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)To terminate a switch statement, loop, or labeled block."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)To terminate an Object statement."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)To delete a (global) variable."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)To divide (or \"break\") a mathematical value in half."
      }
    ]
  },
  {
    "question": "In an array object, what is the key of the first value?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)$"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)-1"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)0"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)100"
      }
    ]
  },
  {
    "question": "Which of the following primitive values exist in JavaScript?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)boolean"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)string"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)All of these"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)number"
      }
    ]
  },
  {
    "question": "What keyword is used to begin a conditional statement?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)how"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)condition"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)if"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)when"
      }
    ]
  },
  {
    "question": "What character ends a javascript statement?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A period \".\"."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)A semicolon \";\"."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A colon \":\"."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)An exclamation mark \"!\"."
      }
    ]
  },
  {
    "question": "Which has the correct syntax of a ternary operation?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var x = y === true ? \"true\" : \"false\";"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var x = ( y === true ) : \"true\" ? \"false\";"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var x = y === true : \"true\" ? \"false\";"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var x = ( y === true ) { \"true\" : \"false\" };"
      }
    ]
  },
  {
    "question": "JavaScript is an implementation of the ______ language standard.",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)HTML"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)ActionScript"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)VBScript"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)ECMAScript"
      }
    ]
  },
  {
    "question": "If a function doesn't explicitly use the \"return\" operator, what will the return value be when the function is invoked?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)closure"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      }
    ]
  },
  {
    "question": "What is result of the following expression: var a = \"test\"; console.log(!!a);",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)SyntaxError"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      }
    ]
  },
  {
    "question": "What is the name of the String prototype that appends the given string to the base string and returns the new string?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"x\".concat(\"foo\")"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"x\".add(\"foo\")"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these does that and/or such method doesn't exist in javascript!"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"x\".combine(\"foo\")"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"x\".match(\"foo\")"
      }
    ]
  },
  {
    "question": "Which of these is a correct method to create a new array?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var myArray = ();"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var myArray = array();"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var myArray = [];"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var myArray = new Array[];"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var myArray = {};"
      }
    ]
  },
  {
    "question": "var data = [\"A\", \"B\", \"C\", \"D\"]; data.unshift(\"X\"); data.push(\"Y\"); What does data look like?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[\"A\", \"B\", \"C\", \"D\", \"X\", \"Y\"]"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)[\"X\", \"A\", \"B\", \"C\", \"D\", \"Y\"]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[\"A\", \"B\", \"C\", \"X\", \"D\", \"Y\"]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[\"Y\", \"A\", \"B\", \"C\", \"D\", \"X\"]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[\"X\", \"Y\", \"A\", \"B\", \"C\", \"D\"]"
      }
    ]
  },
  {
    "question": "What character combination is used to create a single line comment?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)!!"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)$$"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)--"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)//"
      }
    ]
  },
  {
    "question": "Which of the following is the syntax for an object literal (with no properties)?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[];"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)object;"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency){};"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)nil;"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)();"
      }
    ]
  },
  {
    "question": "How can you concatenate multiple strings?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'One' + 'Two' + 'Three'"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Both of these"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'One'.concat('Two', 'Three')"
      }
    ]
  },
  {
    "question": "How do you assign object properties?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)obj[\"age\"] = 25 OR obj.age = 25"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)obj.age = 25 OR obj(@\"age\") = 25"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)obj(age) = 25 OR obj.age = 25"
      }
    ]
  },
  {
    "question": "Consider this code:  var x = ['Hello'];  What value will 'x[1]' return?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"Hello\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NULL"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)['Hello']"
      }
    ]
  },
  {
    "question": "The _______ operator returns a string that identifies the type of its operand.",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)typename"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)getType"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Type"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)TypeOf"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)typeof"
      }
    ]
  },
  {
    "question": "When writing an object literal, what is used to separate the properties from each other?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)a colon \":\""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)a comma \",\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)a full-stop \".\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)a semicolon \";\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)an underscore \"_\""
      }
    ]
  },
  {
    "question": "What are curly braces (\"{\" and \"}\") used for?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Invoking a function"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Defining a class"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Parsing JSON"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Block declarations and object literals"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Setting attributes"
      }
    ]
  },
  {
    "question": "What is the value of x?  function foo(y) {   var z = 10;   z = 7; };  var x = foo(\"bar\");",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"bar\""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)7"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)10"
      }
    ]
  },
  {
    "question": "How do you create an object in JavaScript?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)All of these work."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var obj = {};"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var obj = new Object();"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function Foo() {}  var obj = new Foo();"
      }
    ]
  },
  {
    "question": "Which of the following is not a method in the \"JSON\" object according to the ECMAScript specification?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)JSON.parse"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)JSON.stringify"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)JSON.fromString"
      }
    ]
  },
  {
    "question": "How can you get the number of characters in a string ?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"1234567\".getLength()"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"1234567\".length"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"1234567\".Length"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"1234567\".length()"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"1234567\".Length()"
      }
    ]
  },
  {
    "question": "What is the result of the following statement: 0 == \"\";",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Throws Error, invalid comparison"
      }
    ]
  },
  {
    "question": "What does null, undefined, \"string\", 20, true and false have in common?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)they are primitive values"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)they have the same instance properties"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)they are objects"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)they are functions"
      }
    ]
  },
  {
    "question": "Given the following code, what is the value of x?      var x = ['foo', 'bar'];     x.length = 1;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[\"bar\"]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[\"foo\", \"bar', 1]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[\"foo\", \"bar\"]"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)[\"foo\"]"
      }
    ]
  },
  {
    "question": "Math.random() returns..",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)a random number between 0 and 1000"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)a random number between 0 and 1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)a random number that can be any value"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)a random number between 0 and 100"
      }
    ]
  },
  {
    "question": "What is the result of the following expression?  ({\"foo\": true}).foo;",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)4"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)SyntaxError"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      }
    ]
  },
  {
    "question": "In the loop, \"for (first clause; second clause; third clause) { statements; }\" What does the second clause represent?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Code to execute once, after the loop has ended"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Code to execute once, before the loop starts"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A condition to check at the end of each loop cycle"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)A condition to check at the beginning of each loop cycle"
      }
    ]
  },
  {
    "question": "What is the value of `x` after the following?  var x = \"hello\"; (function() {     x = \"goodbye\"; }());",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"hello\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined. A SyntaxError is thrown"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"goodbye\""
      }
    ]
  },
  {
    "question": "Which is not a primitive data type in JavaScript?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)character"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)number"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)boolean"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)string"
      }
    ]
  },
  {
    "question": "What will invoking `foo` return?  function foo() {     var x = 10;     x = 7;  };",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)foo"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)10"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)7"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      }
    ]
  },
  {
    "question": "What is the value of x?  var str = \"what is this\"; var x = str.search(\"is\");",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)4"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)7"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)6"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)5"
      }
    ]
  },
  {
    "question": "The \"this\" keyword refers to ...",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)parent object that hosts the current function."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)current execution context (could be any value)."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function currently being executed."
      }
    ]
  },
  {
    "question": "'&' Operator is  _____",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)a displacement bit operator"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)an operator used in conditionals"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)an assignment operator"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)a bitwise operator"
      }
    ]
  },
  {
    "question": "What character combination is used to alter the order of operations by grouping expressions?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)< >"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[ ]"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)( )"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency){ }"
      }
    ]
  },
  {
    "question": "var x = Math.ceil(10.126);  What is the value of x?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)An error, because it was called incorrectly"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)10.13"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)10"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)11"
      }
    ]
  },
  {
    "question": "What is the type of `null`, according to the `typeof` operator?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"object\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"null\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"array\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"undefined\""
      }
    ]
  },
  {
    "question": "function b(x, y, a) {     arguments[2] = 10;     alert(a); } b(1, 2, 3);  What is alerted?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)10"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)2"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)3"
      }
    ]
  },
  {
    "question": "What is the difference between using call() and apply() to invoke a function with multiple arguments?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)apply() is deprecated in favor of call()"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)apply() is identical to call(), except apply() requires an array as the second parameter"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)apply() is identical to call(), except call() requires an array as the second parameter"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)apply() is exactly identical to call()"
      }
    ]
  },
  {
    "question": "var y = 3, x = y++;  What is the value of x?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)5"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)2"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)4"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)6"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)3"
      }
    ]
  },
  {
    "question": "Which of the following types does NOT exist in javascript?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)object"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)number"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)boolean"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)string"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)integer"
      }
    ]
  },
  {
    "question": "What is the end value of myAddedVar with the following code:  var myVar = '5'; var myAddedVar = myVar + 10;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)15"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)'510'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)510"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Nothing, the code will result in an error."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      }
    ]
  },
  {
    "question": "What does this line do?  variable++;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Increments the value of \"variable\" and returns the new value"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Returns a value 1 greater than \"variable\" without changing its value"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Adds the value of \"variable\" to itself"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Returns an error to the browser"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Increments the value of \"variable\" but returns the previous value"
      }
    ]
  },
  {
    "question": "var a = new Boolean(false);  What is (typeof a)?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'boolean'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'false'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'number'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'primitive'"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)'object'"
      }
    ]
  },
  {
    "question": "What is the value of x?  var x = typeof new String(\"abc\");",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)string"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)object"
      }
    ]
  },
  {
    "question": "Which of these will invoke a function?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function.Execute(...)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function.Apply(...)"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)function.apply(...)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function.exec(...)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function.invoke(...)"
      }
    ]
  },
  {
    "question": "Does NaN equal itself?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)No, when trying to compare it against itself, an exception is thrown."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Yes, just like 123 is equal to (==) 123, NaN is equal to NaN."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)No, NaN does not equal itself (== comparison would return false)."
      }
    ]
  },
  {
    "question": "What will happen in the console after executing this code?  if (\"foo\") {     console.log(\"foo\" === false);     console.log(\"foo\" === true); }",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)false false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)TypeError : Cannot convert to boolean"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN NaN"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false true"
      }
    ]
  },
  {
    "question": "What is the value of the function log?   var _ = '_'; log(parseInt(_));",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'/e242'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)SyntaxError: Unexpected identifier"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)242"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)TypeError: incorrect type of argument, expected Number but was String."
      }
    ]
  },
  {
    "question": "Which of these is not a built-in object constructor?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Time"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)RegExp"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Array"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Date"
      }
    ]
  },
  {
    "question": "Given the following code:  var myVar = '5'; var myAddedVar = myVar + 10;   What is the value of (myAddedVar.constructor === Number)?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Type Error"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)false"
      }
    ]
  },
  {
    "question": "How would you iterate over the following object? var my_data = {a: 'Ape', b: 'Banana', c: 'Citronella'};",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these. One can only iterate over arrays, not objects."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)for (var i = 0; i < my_data.length; i++) {}"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)foreach (my_data as key => value) {}"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)for (var key in my_data) {}"
      }
    ]
  },
  {
    "question": "What is the value of x after the following code is executed? var x = 0; x = x++;",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)0"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1"
      }
    ]
  },
  {
    "question": "You use the Math.tan( ) method to:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Return the tangent of an angle (in gradients)"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Return the tangent of an angle (in radians)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Return the tangent of an angle (in degrees)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Does not exist in JavaScript"
      }
    ]
  },
  {
    "question": "A javascript variable prefixed with a $ is:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)still valid, but deprecated since Javascript 1.6"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)valid javascript syntax as any other character"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)invalid, a common bug introduced by developers coming from PHP or Perl"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)only valid within certain javascript libraries"
      }
    ]
  },
  {
    "question": "Math.min() < Math.max();  ...will return:",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      }
    ]
  },
  {
    "question": "Math.min() < Math.max(); will return",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)false"
      }
    ]
  },
  {
    "question": "What does the following expression return?  1 + 5 + \" bottles of milk\";",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined. An exception is thrown"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"6 bottles of milk\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"15 bottles of milk\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"5 bottles of milk\""
      }
    ]
  },
  {
    "question": "Which Object method takes a `propertyName` parameter and returns `true` if the object contains an uninherited property with that key?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)obj.exists('propertyName');"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)obj.hasOwnProperty('propertyName');"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)obj.contains('propertyName');"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)obj.doesPropertyExist('propertyName');"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)obj.hasProperty('propertyName');"
      }
    ]
  },
  {
    "question": "var foo  = \"Global\"; function fun() {     log( foo );     var foo = \"Local\";     log( foo ); } fun();  What the output of the above to log()?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Global Local"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Global Global"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Local Local"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined Local"
      }
    ]
  },
  {
    "question": "Which of the following is NOT a valid way to write a loop that will iterate over the values in the array in variable \"myArray\"?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)for (var i = 0, len = myArray.length; i < len; i++) {}"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)None of these, they are all valid"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)for (var i = 0; i < myArray.length; i++) {}"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var i = 0; for (; i < myArray.length; i++) {}"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)for (var i = 0; i < myArray.length; i += 1) {}"
      }
    ]
  },
  {
    "question": "What is the value of c?  var A = function () {     this.b = 1; } A.prototype.b = 2; var c = new A().b;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)2"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Can be 1 or 2"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)SyntaxError thrown when running the code"
      }
    ]
  },
  {
    "question": "What will be the value of x?  function A() {  this.do = function () { return 'foo'; }; } A.prototype = {   do: function () { return 'bar'; } }; var x = new A().do();",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"foo\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"bar\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Throw an Error"
      }
    ]
  },
  {
    "question": "What is the right way to combine two arrays into a new array?  var a = [\"a\", \"b\", \"c\"]; var b = [\"d\", \"e\", \"f\"];",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var c = a.join(b);"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var c = a.concat(b);"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var c = a.push() + b.push();"
      }
    ]
  },
  {
    "question": "What is the output?  var one; var two = null; console.log(one == two, one === two);",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false false"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Error: one is not defined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true true"
      }
    ]
  },
  {
    "question": "Which are the different ways to affect the \"this\" reference in a function?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Direct attribution, e.g. this = x;"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Invoking a function with the \"new\" keyword, invoking through the .call() method, invoking through the .apply() method."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)the \"this\" keyword is a global reference that always has the same value."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Only by invoking through the .call() or .apply() method."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Only by invoking a function with the \"new\" keyword"
      }
    ]
  },
  {
    "question": "What is the difference between the two declaration methods below?  var functionOne = function() {     /* some code */ }  function functionTwo() {     /* some code */ }",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)No difference, they are treated the same way by the javascript engine. Different syntax to do the same."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)functionOne is defined in-place (until that line, functionOne is undefined), whereas functionTwo is hoisted to the top of the scope and is available as a function throughout the scope."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)functionOne is not a correct way to define functions"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)functionTwo is defined in-place (until that line, functionTwo is undefined), whereas functionOne is hosted to the top of the scope and is available as a function throughout the scope."
      }
    ]
  },
  {
    "question": "How does JavaScript interpret numeric constants outside of strict mode?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)As octal if they are preceded by a zero, and as hexadecimal if they are preceded by a zero and \"x\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)None of these are correct"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)As hexadecimal if they are preceded by a zero only"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)As octal if they are preceded by an underscore"
      }
    ]
  },
  {
    "question": "When reserved words are used as keys in object literals they must be ______?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Prefixed with the @ operator"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)quoted"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)escaped"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)This is not possible in javascript"
      }
    ]
  },
  {
    "question": "Mathematical expression, \"10\" - (12+5).toString(), evaluates to what?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)-7"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)3"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Throws Javascript error"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)10125"
      }
    ]
  },
  {
    "question": "What does the following return?  Number(null);",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)0"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      }
    ]
  },
  {
    "question": "What is the value of x.length after running this code?  x = [\"foo\"]; x.quux = \"Hello\"; x[1] = \"bar\";",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Error on last line: index out of bounds"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)2"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)3"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Error on middle line: cannot add properties to Array"
      }
    ]
  },
  {
    "question": "What is the value of x after the code below is executed?  var x = \"\"; function foo() {     x += \"foo \"; } var bar = function() {     x += \"bar \"; }; foo(); var quux = bar = foo; quux();",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"foo bar \""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"bar \""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"foo foo \""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"foo bar\""
      }
    ]
  },
  {
    "question": "What will be in console after executing this code:  console.log(1 + '1' - 1);",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)10"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'1'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'111'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1"
      }
    ]
  },
  {
    "question": "The expression (typeof NaN === \"number\") evaluates to:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Throws an Error"
      }
    ]
  },
  {
    "question": "What will: typeof typeof(null) return?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Number"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)error"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)string"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)empty"
      }
    ]
  },
  {
    "question": "What will the expression a === b return after the following?   var a = {   \"foo\": \"bar\" };  var b = {  \"foo\": \"bar\" };",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)An exception is thrown."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)false"
      }
    ]
  },
  {
    "question": "How can you remove an element from an array and replace it with a new one ?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)array.split(...)"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)array.splice(...)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)array.switch(...)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)array.overwrite(...)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)array.replace(...)"
      }
    ]
  },
  {
    "question": "What will we see in the console after the following code run: var a = 'Bolt'; function f() {  if (!a) {     var a = 'Nut';  }     console.log(a); } f(); console.log(a);",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'Bolt' and 'Bolt'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'Nut' and 'Nut'"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)'Nut' then 'Bolt'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'Bolt' then 'Nut'"
      }
    ]
  },
  {
    "question": "true + true will return :",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)2"
      }
    ]
  },
  {
    "question": "What is the result of:  function foo() {     output( \"biz \" +  bar() ); }  bar();  var bar = function() { return \"baz\"; }",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)foo baz"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)biz bar"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)TypeError: Undefined is not a function"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)biz baz"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)baz biz"
      }
    ]
  },
  {
    "question": "What is the value of x?  var x = 10/0;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)0"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Infinity"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Runtime exception"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      }
    ]
  },
  {
    "question": "What will be the result of this expression: void 0",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)SyntaxError"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)TypeError"
      }
    ]
  },
  {
    "question": "What does Math.random() do?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Returns a random number more than 0 and less than 1."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Returns a random number from and including 0 to less than 1."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Returns a random number more than 0 up to and including 1."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Randomly selects a number 1-10."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Randomly put numbers in descending and ascending order"
      }
    ]
  },
  {
    "question": "In the following code:  function test() {     var foo = bar = 5; } test();",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)SyntaxError is thrown"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Variable foo is a local variable. But bar is a global variable."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Both foo and bar are global variables."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Both foo and bar are local variables."
      }
    ]
  },
  {
    "question": "What are the values of x and y after the invocation of `foo`  in following?  var x = \"I am global x\"; var y = \"I am global y\";  function foo() {     var y = x = \"Hello from foo\"; } foo();",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)x = \"I am global x\"; y = \"I am global y\";"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)x = \"Hello from foo\"; y = \"I am global y\";"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The function throws a SyntaxError"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)x = \"Hello from foo\"; y = \"Hello from foo\";"
      }
    ]
  },
  {
    "question": "var q = null;  q++;  What is q?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Type Error"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      }
    ]
  },
  {
    "question": "Given the following code, what will myFunction(123, false, \"test\") return?  function myFunction(param) {     return arguments[1] || param; }",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)123"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"test\""
      }
    ]
  },
  {
    "question": "After the following code:  var a = function(){     this.b = 1;     this.deleteMe = function(){         delete this;     } }; var c = new a(); c.deleteMe();  What is the value of (String(c))?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)[object Object]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Error thrown"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)(empty)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      }
    ]
  },
  {
    "question": "Which operator has highest precedence?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)+"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)-"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)^"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)*"
      }
    ]
  },
  {
    "question": "function Question() {     this.answered = false; }  Question.prototype.rightAnswer = 5;  console.log(     new Question().rightAnswer,     Question.rightAnswer );  What gets printed to the console?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined 5"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)5 5"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined undefined"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)5 undefined"
      }
    ]
  },
  {
    "question": "What will the console log when running this code?  Function.prototype.a = 1; var a = new Function(); a.prototype.a = 2; var c = new a(); console.log(a.a , c.a);",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Error thrown when running the code"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)1 2"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)2 1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)2 2"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1 1"
      }
    ]
  },
  {
    "question": "Evaluate:  undefined + 2",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)2"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Type Error"
      }
    ]
  },
  {
    "question": "Evaluate:  new Boolean(new Boolean(false)).valueOf()",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Type Error"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)(Instance of object Boolean with valueOf false)"
      }
    ]
  },
  {
    "question": "An (inner) function enjoys access to the parameters and variables of all the functions it is nested in. This is called:",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Lexical scoping"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Prototypal inheritance"
      }
    ]
  },
  {
    "question": "Object.keys(x)",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)returns all properties of x as an array of strings, including non-enumerable properties."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Incorrect syntax for using Object.keys."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)returns a key that can be used to unlock the object after Object.freeze(x)."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)returns the enumerable properties of x as an array of strings."
      }
    ]
  },
  {
    "question": "\"bar\".split().length returns:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)throws an error"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)3"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)2"
      }
    ]
  },
  {
    "question": "Math.Pi returns the mathematical constant of Pi. What standard JavaScript method would truncate Math.Pi to 3.14 ?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Math.Pi.toString(\"D2\")"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Math.Pi.toPrecision(2)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Math.Round(Math.Pi)"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Math.Pi.toFixed(2)"
      }
    ]
  },
  {
    "question": "function foo(){     var tmp = 'one_two_three_four_five';     return tmp.replace('_', '+'); }  What does foo() return?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)one_two_three_four_five"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)one+two+three+four+five"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)one+two_three_four_five"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)one+"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)one_"
      }
    ]
  },
  {
    "question": "var x = { foo: \"A\" }; x.constructor.prototype.foo = \"B\"; var y = {}; console.log(x.foo); console.log(y.foo);  Which two values will be logged?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"B\"  undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"B\"  \"B\""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)\"A\"  \"B\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"A\"  undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"A\" \"A\""
      }
    ]
  },
  {
    "question": "Evaluate the following expression:  ~-(2 + \"2\")",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)23"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)22"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)-22"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)21"
      }
    ]
  },
  {
    "question": "Which of these will create a copy of an array such that changes to the old array will not be reflected in the new array?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var newArray = new Array(oldArray);"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var newArray = [oldArray];"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)var newArray = oldArray;"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)var newArray = oldArray.slice(0);"
      }
    ]
  },
  {
    "question": "What is the output of the following? var x = 1; console.log(x++ + ++x + x);",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)3"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)6"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)7"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)4"
      }
    ]
  },
  {
    "question": "console.log( ~[]+~![]+~!![] );  Console output is:",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)4"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)-4"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)-3"
      }
    ]
  },
  {
    "question": "What value is passed to function \"foo\" as first argument?  foo( +\"5\" );",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"05\""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)5"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"5\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)0"
      }
    ]
  },
  {
    "question": "What will be printed to the console as a result of this code?  var printName = function() {     console.log('Matt');     printName = function() {         console.log('James');     }; }; var copy = printName; printName(); copy();",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Matt Matt"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)James Matt"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Matt James"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)James James"
      }
    ]
  },
  {
    "question": "What is the result of:  console.log((!+[]+[]+![]).length);",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)4"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)0"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)9"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)syntax error"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)18"
      }
    ]
  },
  {
    "question": "What is the value of x after the following code is run?  var obj = { 0: 'who', 1: 'what', 2: 'idontknow'}; var x = 1 in obj;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"who\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Nothing, the code throws a syntax error"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"what\""
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      }
    ]
  },
  {
    "question": "Which of the following String prototype method takes a regular expression?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)indexOf()"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)search()"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)All of these"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)charCodeAt()"
      }
    ]
  },
  {
    "question": "What is the value of mike after this code is run?  function Person(name, age) {     this.name = name;     this.age = parseInt(age, 10); }  var mike = Person('Mike', '25');",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency){ name: 'Mike', age: 25 }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)This code won't run. It throws a SyntaxError."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency){ name: 'Mike', age: '25' }"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      }
    ]
  },
  {
    "question": "var x = ([]+!![])[+!+[]];  What is the value of x?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[]"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)'a'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Syntax Error"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)'r'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      }
    ]
  },
  {
    "question": "Which of the following expressions evaluates to false?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)new Boolean(0) == 0"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)new Boolean('false') == false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)new Boolean(1) == 1"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)They're all evaluate to true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)new Boolean('true') == true"
      }
    ]
  },
  {
    "question": "Math.log(x) returns:",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Logarithm base e (Euler's number) of x."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Logarithm base 8 of x."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Logarithm base 2 of x."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Logarithm base 10 of x."
      }
    ]
  },
  {
    "question": "Which of the following is not a reserved word in the language?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)and"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)instanceof"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)debugger"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)while"
      }
    ]
  },
  {
    "question": "What is the result of the below expression? Assume output is a function that outputs a line of text. output(typeof (function() {output(\"Hello World!\")})());",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Hello World! undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined Hello World!"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)function"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)string"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)object"
      }
    ]
  },
  {
    "question": "What is the value of \"x\" after the following code runs?  var x; x++;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)0"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)NaN"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Throws a TypeError on the \"x++;\" statement"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1"
      }
    ]
  },
  {
    "question": "function foo() {      this = \"foo\"; }  var a = foo();  What will the preceding code produce?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)ReferenceError: Invalid left-hand side in assignment"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)SyntaxError: Unexpected token"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"foo\""
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)\"undefined\""
      }
    ]
  },
  {
    "question": "What will this code produce: +new Date()",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Unix timestamp in milliseconds (UTC timezone)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Unix timestamp in milliseconds (Local timezone)"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)A SyntaxError"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)The Unix epoch (1970-01-01 00:00:00)"
      }
    ]
  },
  {
    "question": "What is the value of c?  var a = function(){     this.b = 1; } var b = function(){     this.b = new a().b;     return 5; } var c = b() + new b();",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)5"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)1"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Error thrown when running the code"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)6"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)[object]"
      }
    ]
  },
  {
    "question": "Which of the following Array prototype method actually modifies the array it's been called on?",
    "answers": [
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)splice()"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)slice()"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)all of them"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)concat()"
      }
    ]
  },
  {
    "question": "What does the following return? Math.max();",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Infinity"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)-Infinity"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)0"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)null"
      }
    ]
  },
  {
    "question": "Which are the different  value types in JavaScript?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)boolean, integer, float, string, array, object and null"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)boolean, number, string, function, object, null and undefined"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)boolean, number, date, regexp, array and object"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)boolean, number, string, function, object and undefined"
      }
    ]
  },
  {
    "question": "String values have a \"length\" property. Why is this property not included in a for-in loop over a string object?  var prop, str;  str = 'example';  /* str.length === 7 */  for ( prop in str) {}",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Because the \"length\" property isn't a real property (defined and set through get/set accessors). Properties with accessors are not included in for-in loops."
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Because the \"length\" property is only in the String prototype, it is not an own property of string objects, and as such is not included in a for-in loop."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Because the \"length\" property has internal [[Enumerable]] set to false."
      }
    ]
  },
  {
    "question": "What will the following code, when evaluated, do?  var void = function () {};",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Create a local variable named \"void\" but stays undefined due to a SyntaxError."
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)Throw a SyntaxError"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Assign an anonymous function to variable named \"void\""
      }
    ]
  },
  {
    "question": "Object(\"s\") instanceof String === \"s\" instanceof String",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)false"
      }
    ]
  },
  {
    "question": "What's the correct syntax for creating a Date object for January 10, 1998?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)new Date(1998, 1, 10);"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)new Date(1, 10, 1998);"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)new Date(1998, 0, 10);"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)new Date(0, 10, 1998);"
      }
    ]
  },
  {
    "question": "Evaluate: ![]+[]",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)Syntax Error"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)'false'"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)false"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)undefined"
      }
    ]
  },
  {
    "question": "What is the value of x?  var a = \"abc\"; var x = a instanceof String;",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)true"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)false"
      }
    ]
  },
  {
    "question": "Which of the following is NOT a reserved word in JavaScript?",
    "answers": [
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)implements"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)goto"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)super"
      },
      {
        "value": false,
        "text": "money_format(p.cdm_cost, p.currency)abstract"
      },
      {
        "value": true,
        "text": "money_format(p.cdm_cost, p.currency)array"
      }
    ]
  }
]
